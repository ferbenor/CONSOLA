╔════════════════════════════════════════════════════════════════════════╗
║          CÓMO FUNCIONA EL SISTEMA DE ACTUALIZACIONES CON VELOPACK     ║
╚════════════════════════════════════════════════════════════════════════╝


═══════════════════════════════════════════════════════════════════════════
PARTE 1: INSTALACIONES INICIALES (PRIMERA VEZ)
═══════════════════════════════════════════════════════════════════════════

┌───────────────────────────────────────────────────────────────────────┐
│ 1.1. INSTALAR .NET 8.0 SDK                                            │
└───────────────────────────────────────────────────────────────────────┘

   Descargar desde: https://dotnet.microsoft.com/download/dotnet/8.0

   Verificar instalación:
   > dotnet --version
   8.0.xxx


┌───────────────────────────────────────────────────────────────────────┐
│ 1.2. INSTALAR VELOPACK CLI (Herramienta de Empaquetado)              │
└───────────────────────────────────────────────────────────────────────┘

   Abrir terminal/PowerShell como Administrador:

   > dotnet tool install -g vpk

   Verificar instalación:
   > vpk --version
   0.0.xxx


┌───────────────────────────────────────────────────────────────────────┐
│ 1.3. AGREGAR PAQUETE NUGET DE VELOPACK AL PROYECTO                   │
└───────────────────────────────────────────────────────────────────────┘

   Opción A - Desde Visual Studio:
   ────────────────────────────
   1. Click derecho en el proyecto → "Administrar paquetes NuGet"
   2. Buscar: "Velopack"
   3. Instalar el paquete "Velopack" (versión 0.0.1298 o superior)

   Opción B - Desde línea de comandos:
   ──────────────────────────────────
   > cd C:\ruta\a\tu\proyecto
   > dotnet add package Velopack

   Opción C - Editar manualmente .csproj:
   ────────────────────────────────────
   Agregar dentro de <ItemGroup>:

   <ItemGroup>
     <PackageReference Include="Velopack" Version="0.0.1298" />
   </ItemGroup>

   Luego ejecutar:
   > dotnet restore


┌───────────────────────────────────────────────────────────────────────┐
│ 1.4. VERIFICAR QUE TODO ESTÁ INSTALADO                               │
└───────────────────────────────────────────────────────────────────────┘

   Ejecutar estos comandos:

   > dotnet --version
   8.0.xxx ✓

   > vpk --version
   0.0.xxx ✓

   > dotnet list package
   Velopack    0.0.1298 ✓



═══════════════════════════════════════════════════════════════════════════
PARTE 2: CONFIGURACIÓN DEL SERVIDOR IIS
═══════════════════════════════════════════════════════════════════════════

┌───────────────────────────────────────────────────────────────────────┐
│ 2.1. ESTRUCTURA DEL SERVIDOR                                         │
└───────────────────────────────────────────────────────────────────────┘

   Servidor Web (IIS)
   https://consultas.santarosa.gob.ec/consola/
   │
   ├── index.html                     # Página de instalación
   ├── web.config                     # Configuración IIS
   ├── CONSOLA-win-Setup.exe         # Instalador inicial (con icono)
   ├── CONSOLA-1.0.0-full.nupkg      # Paquete versión 1.0.0
   ├── CONSOLA-1.0.1-full.nupkg      # Paquete versión 1.0.1
   ├── CONSOLA-1.0.1-delta.nupkg     # Solo cambios 1.0.0→1.0.1 (~200 KB)
   └── releases.win.json              # ¡ARCHIVO CLAVE! Lista versiones


┌───────────────────────────────────────────────────────────────────────┐
│ 2.2. PASOS PARA CONFIGURAR IIS                                       │
└───────────────────────────────────────────────────────────────────────┘

   1. Crear carpeta física:
      C:\sitios\consola\

   2. Compartir carpeta en red (opcional):
      Click derecho → Propiedades → Compartir
      Nombre del recurso: sitios$
      Acceso: \\192.168.100.18\sitios$\consola

   3. Abrir IIS Manager:
      Windows + R → inetmgr

   4. Agregar sitio web:
      - Click derecho en "Sitios" → "Agregar sitio web"
      - Nombre del sitio: CONSOLA
      - Ruta física: C:\sitios\consola
      - Puerto: 80 (o el que prefieras)
      - Nombre de host: consultas.santarosa.gob.ec

   5. Configurar permisos:
      - Click derecho en C:\sitios\consola → Propiedades → Seguridad
      - Agregar usuario: IIS_IUSRS
      - Permisos: Lectura y ejecución, Leer

   6. Copiar archivos al servidor:
      - index.html (página de instalación)
      - web.config (tipos MIME para .nupkg)

   Ver archivo: CONFIGURACION_IIS.md para detalles completos


┌───────────────────────────────────────────────────────────────────────┐
│ 2.3. ARCHIVO web.config (Tipos MIME)                                 │
└───────────────────────────────────────────────────────────────────────┘

   Ya está incluido en: ./instalador/web.config

   Configura tipos MIME para:
   - .nupkg → application/octet-stream
   - .json → application/json
   - .exe → application/octet-stream
   - .zip → application/zip



═══════════════════════════════════════════════════════════════════════════
PARTE 3: IMPLEMENTAR ACTUALIZACIONES EN OTRO PROYECTO
═══════════════════════════════════════════════════════════════════════════

┌───────────────────────────────────────────────────────────────────────┐
│ 3.1. ARCHIVOS QUE NECESITAS COPIAR DE ESTE PROYECTO                  │
└───────────────────────────────────────────────────────────────────────┘

   Copiar estos archivos a tu nuevo proyecto:

   ✓ UpdateManager.cs           → Wrapper de Velopack
   ✓ FormActualizacion.cs       → Formulario con barra de progreso
   ✓ icono.ico                  → Icono de la aplicación
   ✓ deploy.bat                 → Script de despliegue automatizado
   ✓ instalador/web.config      → Configuración IIS
   ✓ instalador/index.html      → Página de instalación


┌───────────────────────────────────────────────────────────────────────┐
│ 3.2. MODIFICAR TU PROYECTO                                           │
└───────────────────────────────────────────────────────────────────────┘

   ┌─────────────────────────────────────────────────────────────────┐
   │ PASO 1: Agregar paquete NuGet Velopack                         │
   └─────────────────────────────────────────────────────────────────┘

   > dotnet add package Velopack

   O editar .csproj:
   <ItemGroup>
     <PackageReference Include="Velopack" Version="0.0.1298" />
   </ItemGroup>


   ┌─────────────────────────────────────────────────────────────────┐
   │ PASO 2: Configurar .csproj                                     │
   └─────────────────────────────────────────────────────────────────┘

   Agregar en <PropertyGroup>:

   <PropertyGroup>
     <OutputType>WinExe</OutputType>
     <TargetFramework>net8.0-windows</TargetFramework>
     <UseWindowsForms>true</UseWindowsForms>
     <Version>1.0.0</Version>
     <Platforms>AnyCPU;x64</Platforms>
     <ApplicationIcon>icono.ico</ApplicationIcon>
   </PropertyGroup>


   ┌─────────────────────────────────────────────────────────────────┐
   │ PASO 3: Modificar Program.cs                                   │
   └─────────────────────────────────────────────────────────────────┘

   using Velopack;

   internal class Program
   {
       // URL del servidor donde están las actualizaciones
       public static string rutaActualizaciones = "https://tu-servidor/tu-app/";

       [STAThread]
       static void Main(string[] args)
       {
           // IMPORTANTE: SIEMPRE PRIMERO
           VelopackApp.Build().Run();

           Application.EnableVisualStyles();
           Application.SetCompatibleTextRenderingDefault(false);
           Application.Run(new FormPrincipal());
       }
   }


   ┌─────────────────────────────────────────────────────────────────┐
   │ PASO 4: Modificar tu FormPrincipal (o FormLogin)               │
   └─────────────────────────────────────────────────────────────────┘

   using Velopack;

   public partial class FormPrincipal : Form
   {
       private readonly UpdateManager _updateManager;
       private UpdateInfo? _updateInfoPendiente = null;

       public FormPrincipal()
       {
           InitializeComponent();

           // Inicializar gestor de actualizaciones
           _updateManager = new UpdateManager(Program.rutaActualizaciones);

           // Mostrar versión en título
           this.Text = $"Mi App - Versión {_updateManager.ObtenerVersionActual()}";
       }

       // Verificar actualizaciones al cargar
       protected override async void OnLoad(EventArgs e)
       {
           base.OnLoad(e);
           await VerificarActualizacionesAsync(mostrarMensajeSiNoHay: false);
       }

       // Timer para verificar cada 5 minutos
       private async void timerActualizaciones_Tick(object sender, EventArgs e)
       {
           await VerificarActualizacionesAsync(mostrarMensajeSiNoHay: false);
       }

       // Lógica de verificación
       private async Task VerificarActualizacionesAsync(bool mostrarMensajeSiNoHay)
       {
           try
           {
               var updateInfo = await _updateManager.VerificarActualizacionesAsync();

               if (updateInfo != null)
               {
                   // HAY ACTUALIZACIÓN
                   _updateInfoPendiente = updateInfo;
                   var version = updateInfo.TargetFullRelease.Version;

                   var resultado = MessageBox.Show(
                       $"Nueva versión {version} disponible.\n\n¿Desea descargar e instalar ahora?",
                       "Actualización Disponible",
                       MessageBoxButtons.YesNo,
                       MessageBoxIcon.Information
                   );

                   if (resultado == DialogResult.Yes)
                   {
                       IniciarDescargaYActualizacion(updateInfo);
                   }
               }
               else if (mostrarMensajeSiNoHay)
               {
                   MessageBox.Show("Ya tiene la última versión.", "Sin Actualizaciones",
                       MessageBoxButtons.OK, MessageBoxIcon.Information);
               }
           }
           catch (Exception ex)
           {
               // Error de red, servidor no disponible, etc.
           }
       }

       private void IniciarDescargaYActualizacion(UpdateInfo updateInfo)
       {
           using (var formActualizacion = new FormActualizacion(_updateManager, updateInfo))
           {
               formActualizacion.ShowDialog(this);
           }
       }
   }


   ┌─────────────────────────────────────────────────────────────────┐
   │ PASO 5: Agregar Timer en el Designer                           │
   └─────────────────────────────────────────────────────────────────┘

   En FormPrincipal.Designer.cs (o FormLogin.Designer.cs):

   private System.Windows.Forms.Timer timerActualizaciones;

   private void InitializeComponent()
   {
       this.timerActualizaciones = new System.Windows.Forms.Timer(this.components);

       // Timer configuración
       this.timerActualizaciones.Enabled = true;
       this.timerActualizaciones.Interval = 300000; // 5 minutos
       this.timerActualizaciones.Tick += new System.EventHandler(this.timerActualizaciones_Tick);
   }


   ┌─────────────────────────────────────────────────────────────────┐
   │ PASO 6: Modificar deploy.bat                                   │
   └─────────────────────────────────────────────────────────────────┘

   Editar las rutas en deploy.bat:

   set IIS_DST=\\tu-servidor\carpeta$\tu-app

   El resto se configura automáticamente usando %~dp0


┌───────────────────────────────────────────────────────────────────────┐
│ 3.3. PRIMER DESPLIEGUE                                               │
└───────────────────────────────────────────────────────────────────────┘

   1. Compilar y probar localmente:
      > dotnet build

   2. Ejecutar deploy.bat:
      > deploy.bat

      Esto genera en ./instalador/:
      - CONSOLA-1.0.0-full.nupkg
      - CONSOLA-win-Setup.exe
      - releases.win.json
      - index.html
      - web.config

   3. Los archivos se copian automáticamente al servidor de red

   4. Usuarios pueden instalar desde:
      https://tu-servidor/tu-app/



═══════════════════════════════════════════════════════════════════════════
PARTE 4: CÓMO FUNCIONA EL SISTEMA
═══════════════════════════════════════════════════════════════════════════

┌───────────────────────────────────────────────────────────────────────┐
│ 4.1. INSTALACIÓN INICIAL POR USUARIO                                 │
└───────────────────────────────────────────────────────────────────────┘

   Usuario → Navegador → https://consultas.santarosa.gob.ec/consola/
                         │
                         ├─ Ve página bonita (index.html)
                         ├─ Clic en "Instalar CONSOLA"
                         ├─ Descarga CONSOLA-win-Setup.exe
                         └─ Ejecuta instalador
                            │
                            ├─ Instala en: C:\Users\Usuario\AppData\Local\CONSOLA\
                            ├─ Crea acceso directo en Escritorio (con icono)
                            ├─ Registra en Agregar/Quitar Programas (con icono)
                            └─ Versión instalada: 1.0.0


┌───────────────────────────────────────────────────────────────────────┐
│ 4.2. VERIFICACIÓN DE ACTUALIZACIONES (3 MOMENTOS)                    │
└───────────────────────────────────────────────────────────────────────┘

   Cliente (PC del Usuario)                    Servidor IIS
   ────────────────────────                    ────────────

   ┌─────────────────────────────────────────────────────────────┐
   │ A) AL INICIAR LA APLICACIÓN (FormLogin.OnLoad)             │
   └─────────────────────────────────────────────────────────────┘

   1. Usuario abre CONSOLA.exe
      │
      ├─ VelopackApp.Build().Run()
      │  (Inicializa sistema de updates)
      │
      ├─ FormLogin carga
      │  └─ OnLoad() ejecuta automáticamente
      │     └─ VerificarActualizacionesAsync(mostrarMensajeSiNoHay: false)
      │
      ├─► HTTP GET: releases.win.json ────► Servidor devuelve JSON con:
      │                                     {
      │                                       "Assets": [
      │                                         { "Version": "1.0.0" },
      │                                         { "Version": "1.0.1" } ← NUEVA
      │                                       ]
      │                                     }
      │
      ├─ Compara: Instalada (1.0.0) vs Servidor (1.0.1)
      │  └─► ¡HAY ACTUALIZACIÓN!
      │
      └─ Muestra MessageBox:
         "Nueva versión 1.0.1 disponible"
         "¿Desea descargar e instalar ahora?"
         [Sí] [No]
         │
         └─ Si usuario acepta:
            └─ Abre FormActualizacion
               ├─ Descarga: CONSOLA-1.0.1-delta.nupkg (~200 KB)
               ├─ Muestra barra de progreso
               ├─ ApplyUpdatesAndRestart()
               ├─ Cierra la app
               └─ Reinicia con versión 1.0.1


   ┌─────────────────────────────────────────────────────────────┐
   │ B) CADA 5 MINUTOS (Timer automático)                       │
   └─────────────────────────────────────────────────────────────┘

   Timer (timerActualizaciones)
   Interval: 300000 ms (5 minutos)
   │
   └─ timerActualizaciones_Tick()
      └─ VerificarActualizacionesAsync(mostrarMensajeSiNoHay: false)
         │
         ├─► HTTP GET: releases.win.json
         │
         └─ Si hay actualización:
            ├─ Muestra botón "Click para Actualizar" (verde/amarillo)
            └─ Al hacer clic, inicia descarga


   ┌─────────────────────────────────────────────────────────────┐
   │ C) MANUAL (Menú Ayuda → Buscar Actualizaciones)            │
   └─────────────────────────────────────────────────────────────┘

   Usuario → Menú Ayuda → Buscar Actualizaciones
   │
   └─ menuBuscarActualizaciones_Click()
      └─ VerificarActualizacionesAsync(mostrarMensajeSiNoHay: true)
         │
         ├─► HTTP GET: releases.win.json
         │
         ├─ Si HAY actualización:
         │  └─ Muestra MessageBox para instalar
         │
         └─ Si NO hay actualización:
            └─ Muestra: "Ya tiene la última versión"


┌───────────────────────────────────────────────────────────────────────┐
│ 4.3. PUBLICAR NUEVA VERSIÓN (DESARROLLADOR - AUTOMÁTICO)             │
└───────────────────────────────────────────────────────────────────────┘

   Tu PC (Desarrollador)
   │
   ├─ 1. Ejecutas: deploy.bat
   │     │
   │     ├─ Lee versión actual del .csproj (ej: 1.0.3)
   │     ├─ Incrementa automáticamente PATCH (1.0.3 → 1.0.4)
   │     ├─ Actualiza <Version>1.0.4</Version> en .csproj
   │     ├─ Crea backup del .csproj (seguridad)
   │     │
   │     ├─ Compila: dotnet publish -c Release -r win-x64
   │     │
   │     ├─ Empaqueta con Velopack:
   │     │   vpk pack --packId CONSOLA
   │     │            --packVersion 1.0.4
   │     │            --icon icono.ico
   │     │            --mainExe CONSOLA.exe
   │     │
   │     └─ Genera en ./instalador/:
   │         ├─ CONSOLA-1.0.4-full.nupkg    (98 MB - versión completa)
   │         ├─ CONSOLA-1.0.4-delta.nupkg   (~200 KB - solo cambios)
   │         ├─ CONSOLA-win-Setup.exe       (instalador con icono)
   │         └─ releases.win.json           (actualizado con v1.0.4)
   │
   └─ 2. Copia automática al servidor IIS:
         xcopy *.nupkg \\192.168.100.18\sitios$\consola\
         xcopy *.json  \\192.168.100.18\sitios$\consola\
         xcopy *.exe   \\192.168.100.18\sitios$\consola\
         │
         └─► https://consultas.santarosa.gob.ec/consola/
             │
             └─ Listo! Clientes detectarán v1.0.4 automáticamente


┌───────────────────────────────────────────────────────────────────────┐
│ 4.4. FLUJO AUTOMÁTICO EN CADA CLIENTE (EJEMPLO)                      │
└───────────────────────────────────────────────────────────────────────┘

   Día 1, 10:00 AM: Usuario instala v1.0.3

   Día 2, 3:00 PM:  Tú ejecutas deploy.bat → v1.0.4 publicada

   Día 3, 9:00 AM:  Usuario abre app
                    └─► FormLogin.OnLoad() detecta v1.0.4
                    └─► Muestra mensaje "Nueva versión 1.0.4 disponible"
                    └─► Usuario acepta
                    └─► Descarga 200 KB (delta)
                    └─► Actualiza y reinicia
                    └─► Usuario tiene v1.0.4 ✓

   Día 3, 9:15 AM:  Timer verifica (5 min después)
                    └─► Ya está actualizado, no hace nada

   Día 3, 2:00 PM:  Usuario usa menú "Buscar Actualizaciones"
                    └─► "Ya tiene la última versión"


╔════════════════════════════════════════════════════════════════╗
║  ARCHIVO CLAVE: releases.win.json                              ║
╠════════════════════════════════════════════════════════════════╣
║                                                                ║
║  Este archivo es consultado por TODOS los clientes para       ║
║  saber si hay una nueva versión disponible.                   ║
║                                                                ║
║  Ubicación: https://consultas.santarosa.gob.ec/consola/       ║
║             releases.win.json                                  ║
║                                                                ║
║  Generado automáticamente por: vpk pack                       ║
║                                                                ║
║  Ejemplo de contenido:                                         ║
║  {                                                             ║
║    "Assets": [                                                 ║
║      {                                                         ║
║        "PackageId": "CONSOLA",                                 ║
║        "Version": "1.0.4",                                     ║
║        "Type": "Full",                                         ║
║        "FileName": "CONSOLA-1.0.4-full.nupkg",                 ║
║        "Size": 102006961                                       ║
║      },                                                        ║
║      {                                                         ║
║        "PackageId": "CONSOLA",                                 ║
║        "Version": "1.0.4",                                     ║
║        "Type": "Delta",                                        ║
║        "FileName": "CONSOLA-1.0.4-delta.nupkg",                ║
║        "Size": 200448                                          ║
║      }                                                         ║
║    ]                                                           ║
║  }                                                             ║
║                                                                ║
╚════════════════════════════════════════════════════════════════╝


COMPONENTES DEL SISTEMA
━━━━━━━━━━━━━━━━━━━━━━━━

┌─────────────────────────────────────────────────────────────┐
│ FormLogin.cs                                                │
├─────────────────────────────────────────────────────────────┤
│ - OnLoad(): Verifica actualizaciones al iniciar            │
│ - timerActualizaciones: Verifica cada 5 minutos            │
│ - btnClickParaActualizar: Botón verde/amarillo visible     │
│   solo cuando hay actualización disponible                  │
└─────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────┐
│ FormPrincipal.cs                                            │
├─────────────────────────────────────────────────────────────┤
│ - Menú "Ayuda → Buscar Actualizaciones"                    │
│ - Menú "Click para Actualizar" (aparece si hay update)     │
│ - timerActualizaciones: Verifica cada 5 minutos            │
└─────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────┐
│ FormActualizacion.cs                                        │
├─────────────────────────────────────────────────────────────┤
│ - Barra de progreso durante descarga                       │
│ - Muestra porcentaje (0% → 100%)                           │
│ - Botón cancelar (hasta que termine descarga)              │
│ - Aplica actualización y reinicia app                      │
└─────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────┐
│ UpdateManager.cs                                            │
├─────────────────────────────────────────────────────────────┤
│ - Wrapper de Velopack                                       │
│ - VerificarActualizacionesAsync()                          │
│ - DescargarActualizacionAsync()                            │
│ - AplicarActualizacionYReiniciar()                         │
│ - Eventos: ProgresoDescarga, EstadoCambiado                │
└─────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────┐
│ Program.cs                                                  │
├─────────────────────────────────────────────────────────────┤
│ public static string rutaActualizaciones =                 │
│   "https://consultas.santarosa.gob.ec/consola/";           │
│                                                             │
│ VelopackApp.Build().Run(); ← SIEMPRE PRIMERO               │
└─────────────────────────────────────────────────────────────┘


VENTAJAS DE VELOPACK vs CLICKONCE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✓ Funciona con paquetes nativos (IBM DB2)
✓ Delta updates (solo descarga ~200 KB en lugar de 98 MB)
✓ Más rápido (escrito en Rust)
✓ Sin problemas de manifests
✓ Fácil de configurar en IIS
✓ Actualizaciones automáticas en segundo plano
✓ Compatible con múltiples DLLs
✓ Soporta iconos en instalador y ejecutable
✓ Timer de verificación cada 5 minutos
✓ Verificación manual desde menú


SCRIPT deploy.bat (AUTOMATIZADO)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Características:
• Usa rutas relativas (%~dp0)
• Extrae PACK_ID automáticamente del .csproj
• Incrementa versión PATCH automáticamente
• Crea backup de seguridad del .csproj
• Compila, empaqueta y despliega en un solo comando
• Copia a servidor de red automáticamente

Uso:
  cd C:\sistemas\prueba conexion informix\CONSOLA
  deploy.bat

Resultado:
  [1/5] Incrementando version... 1.0.3 → 1.0.4
  [2/5] Publicando aplicacion... ✓
  [3/5] Creando paquetes con Velopack... ✓
  [4/5] Copiando al servidor IIS... ✓
  [5/5] DEPLOY COMPLETADO


RESUMEN RÁPIDO
━━━━━━━━━━━━━━

1. Primera vez (Instalaciones):
   > dotnet tool install -g vpk
   > dotnet add package Velopack

2. Configurar proyecto:
   - Copiar archivos (UpdateManager.cs, FormActualizacion.cs, etc.)
   - Modificar Program.cs (agregar VelopackApp.Build().Run())
   - Modificar Form (agregar verificación de updates)
   - Configurar deploy.bat

3. Cada nueva versión:
   > deploy.bat
   ¡Eso es todo!

4. Los clientes se actualizan:
   - Al abrir la app (FormLogin.OnLoad)
   - Cada 5 minutos (Timer)
   - Manual (Menú Ayuda)

5. Optimización delta:
   - Primera instalación: 98 MB
   - Actualizaciones: ~200 KB
   - Ahorro: 99.8%

¡Sistema completamente automatizado y optimizado!
